website pagination:
1. there will be a list of items in the form of a 2 D string array where each element contains [name,relevane,price].givn the sort olomn, the sort order(0-asc,1-des). the number of items to be displayedon each page (except fot the last page which may have fewer) and a page number, deermine the list of item names in the specified page while respecting the item;s order. page numbering starts at 0..

eg: items=[['item-1','10','15],[],[]]
sortParameter=1
sortOrder=0
itemperPage=2
Pagenumber=1


n=3 items
sort them by (relevance:1) in ascending order (items=[['item-1','10','15],[],[]])
display upto 2 items in each page
the page 0 contains 2 item names [item2, item1] and page 1 contains only n 1 item, so result =item 3

fnction:
public static List<String> fetchItemsToDispay(Lst<List<String>> items, int sortParam,int sortOrder, int itemsPerPage,int pagenumber)




counting pairs
2. given an integer k and a list of integers, count the number of distinct valid pairs of integers(a,b) in the list for which a+k=b, 
two pairs of (a,b) and (c,d) are consideres distinct if at lease one element of (a,b) does not also belong to (c,d)
eg: n-4
numbers=[1,1,1,2]
k=1

this array has 2 different valid pairs:(1,1) and (1,2) for k=1, there is only 1 valid pair whih satifies a+k=b the pair (a,b)=(1,2)

solution: 

public class CountingPairs {
	public static void main(String[] args) {
		//int[] myIntArray = { 1, 1, 1, 2 };
		int[] myIntArray = { 1, 2, 3, 4 ,5,6};
		int sum = countingPairs(myIntArray, 2,6);
		System.out.println(sum);
	}

	public static int countingPairs(int[] numbers, int k, int n) {

		int sum = 0;
		Map<Integer, Integer> pairs = new HashMap<>();

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if ((numbers[i] + k) == numbers[j]) {
					Integer key = numbers[i];
					Integer value = numbers[j];
					if (pairs.containsKey(key)) {
						if (pairs.get(key) != null) {
							if (value != pairs.get(key))
								sum = sum + 1;
						}

					} else {
						sum = sum + 1;
						pairs.put(numbers[i], numbers[j]);
					}
				}
			}
		}
		return sum;
	}
}


3.counting closed paths


some numbers are formed with closed paths. the digits 0,4,6 and 9 each have 1 closed path, 
and 8 has 2 . none of the other numbers is formed woth a closed path . goven a number determine the total number ofclosed paths in all of its dgits combined


number - 649578
the digits with coded paths are 6,4,9,8 the total number of closed paths is 1+1+1+2=5

solution:

public class HelloWorld{

     public static void main(String []args){
        System.out.println("Hello World");
        
        int sum = countingPaths(649578);
        
        System.out.println("sum is ===="+sum);
     }
     
     static int countingPaths(int b){
         
      System.out.println(" ==b=="+b);
      int sum = 0;
      while(b>0){
          int r = b%10;
          if((r==6)||(r==4)||(r==9)||(r==0))
          sum=sum+1;
          else if(r==8)
          sum=sum+2;
          
          b=b/10;
      }
      
         return sum;
     }
}


4. adding floating point numbers

in this challenge write a function to add 2 floating paoint numbers, determine the integer floor of the sum.
 the floor is the trucated float value. anything after the decimal point is dropped.

floor(1.1+2.05)=floor(4.15)=4
2.3+1.9 =4
2.34+5.7=8



Solution:

public class HelloWorld{

     public static void main(String []args){
        System.out.println("Hello World");
        
        int sum = addNumber(3,1);
        
        System.out.println("sum is ===="+sum);
     }
     
     static int addNumber(double a,double b){
         
      System.out.println(" a==="+a+"==b=="+b);
      int sum = (int) (a+b);
      
         return sum;
     }
}